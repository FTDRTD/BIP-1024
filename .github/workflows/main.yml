name: Build Cross-Platform Releases

on:
  push:
    tags:
      - "v*" # 当一个 v 开头的 tag (例如 v1.0, v1.2.3) 被推送到仓库时触发
  workflow_dispatch: # 同时也允许在 Actions 页面手动触发

jobs:
  # ------------------- Windows 构建 -------------------
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ------------------- 缓存并预下载 Dependency Walker -------------------
      - name: Cache Dependency Walker
        id: dw_cache
        uses: actions/cache@v4
        with:
          # Nuitka 寻找 depends.exe 的确切路径
          path: C:\Users\runneradmin\AppData\Local\Nuitka\Nuitka\Cache\downloads\depends\x86_64
          # 一个相对固定的 key，因为这个工具不常变化
          key: dependency-walker-${{ runner.os }}-v1

      - name: Download and Install Dependency Walker (if not cached)
        # 仅在上面的缓存步骤没有命中 (cache-hit != 'true') 时运行
        if: steps.dw_cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $dependsPath = "C:\Users\runneradmin\AppData\Local\Nuitka\Nuitka\Cache\downloads\depends\x86_64"
          Write-Host "Cache not found. Downloading Dependency Walker..."
          New-Item -ItemType Directory -Path $dependsPath -Force
          Invoke-WebRequest -Uri "https://www.dependencywalker.com/depends22_x64.zip" -OutFile "$dependsPath\depends.zip"
          Expand-Archive -Path "$dependsPath\depends.zip" -DestinationPath $dependsPath -Force
          Write-Host "Dependency Walker installed."

      - name: Verify Dependency Walker Installation
        shell: pwsh
        run: |
          Write-Host "Checking for depends.exe..."
          $dependsPath = "C:\Users\runneradmin\AppData\Local\Nuitka\Nuitka\Cache\downloads\depends\x86_64"
          Get-ChildItem -Path $dependsPath
      # ------------------------------------------------------------------
      - name: Install and Upgrade Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m pip install --upgrade nuitka

      - name: Build with Nuitka
        shell: cmd
        run: |
          python -m nuitka --onefile --windows-console-mode=disable --enable-plugin=pyside6 --include-data-file=english.txt=english.txt --output-filename=bip39_recovery-windows.exe bip39_recovery.py
        env:
          # 这个环境变量现在是备用，因为我们已经预先下载了工具
          NUITKA_ALLOW_DEPENDS_DOWNLOAD: 1

      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: bip39-recovery-windows
          path: bip39_recovery-windows.exe

      # ------------------- Linux 构建 (使用 Docker) -------------------
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the Docker image for our builder
        run: docker build -t bip39-builder .

      - name: Run Nuitka inside Docker as current user
        run: |
          # 核心修复：将注释放在 YAML 层面，而不是 shell 命令内部
          # 下面的命令将为 Nuitka 指定一个在挂载卷内的、可写的缓存目录
          docker run --rm \
            --user $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/app \
            -e NUITKA_CACHE_DIR=/app/.nuitka-cache \
            bip39-builder python3 -m nuitka \
              --onefile \
              --enable-plugin=pyside6 \
              --include-data-file=english.txt=english.txt \
              --output-filename=bip39_recovery-linux \
              bip39_recovery.py

      - name: Set executable permissions
        run: chmod +x bip39_recovery-linux

      - name: Upload Linux executable
        uses: actions/upload-artifact@v4
        with:
          name: bip39-recovery-linux
          path: bip39_recovery-linux

  # ------------------- macOS 构建 -------------------
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt nuitka

      - name: Build with Nuitka
        # 在 bash shell 中，行继续符是反斜杠 (\)
        run: |
          python -m nuitka --onefile \
            --macos-create-app-bundle \
            --enable-plugin=pyside6 \
            --include-data-file=english.txt=english.txt \
            --output-filename=bip39_recovery \
            bip39_recovery.py

      - name: Create Zip of .app bundle
        run: ditto -c -k --sequesterRsrc --keepParent bip39_recovery.app bip39_recovery-macos.zip

      - name: Upload macOS executable zip
        uses: actions/upload-artifact@v4
        with:
          name: bip39-recovery-macos
          path: bip39_recovery-macos.zip

  # ------------------- 创建 GitHub Release -------------------
  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ## BIP39 恢复工具 - 跨平台发布版
            本次发布包含了 Windows、Linux 和 macOS 的可执行文件。
            `english.txt` 词库文件已内嵌到每个应用中，无需额外文件。
          generate_release_notes: true
          files: |
            artifacts/bip39-recovery-windows/bip39_recovery-windows.exe
            artifacts/bip39-recovery-linux/bip39_recovery-linux
            artifacts/bip39-recovery-macos/bip39_recovery-macos.zip
